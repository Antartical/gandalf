definitions:
  controllers.pong:
    properties:
      data:
        example: pong
        type: string
    type: object
  helpers.HTTPError:
    properties:
      code:
        example: 400
        type: integer
      error:
        example: status bad request
        type: string
    type: object
  serializers.AppSerializer:
    properties:
      data:
        $ref: '#/definitions/serializers.appDataSerializer'
      type:
        example: app
        type: string
    type: object
  serializers.TokensSerializer:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
        type: string
      expires_in:
        example: 3600
        type: integer
      refresh_token:
        example: kpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyf
        type: string
      token_type:
        example: Bearer
        type: string
    type: object
  serializers.UserSerializer:
    properties:
      data:
        $ref: '#/definitions/serializers.userDataSerializer'
      type:
        example: user
        type: string
    type: object
  serializers.appDataSerializer:
    properties:
      client_id:
        example: 4722679b-5a48-4e85-9084-605e8df610f4
        type: string
      client_secret:
        example: iuhgf3874tiu34gtwerbguv3iu74
        type: string
      icon_url:
        example: https://rb.gy/1akgfo
        type: string
      name:
        example: MyApp
        type: string
      redirect_urls:
        example:
        - http://localhost:/callback
        items:
          type: string
        type: array
      uuid:
        example: 4722679b-5a48-4e85-9084-605e8df610f4
        type: string
    type: object
  serializers.userDataSerializer:
    properties:
      birthday:
        example: "1997-12-21"
        type: string
      email:
        example: test@test.com
        type: string
      name:
        example: John
        type: string
      phone:
        example: "+34666123456"
        type: string
      surname:
        example: Doe
        type: string
      uuid:
        example: 4722679b-5a48-4e85-9084-605e8df610f4
        type: string
    type: object
  validators.AppCreateData:
    properties:
      icon_url:
        example: http://youriconurl.dev
        type: string
      name:
        example: MySuperApp
        type: string
      redirect_urls:
        example:
        - http://yourredirecturl.dev
        items:
          type: string
        type: array
    required:
    - name
    type: object
  validators.AuthTokens:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
        type: string
      refresh_token:
        example: kpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyf
        type: string
    required:
    - access_token
    - refresh_token
    type: object
  validators.Credentials:
    properties:
      email:
        example: johndoe@example.com
        type: string
      password:
        example: My@appPassw0rd
        type: string
    required:
    - email
    - password
    type: object
  validators.OauthAuthorizeData:
    properties:
      client_id:
        example: 4722679b-5a48-4e85-9084-605e8df610f4
        type: string
      redirect_uri:
        example: http://yourredirecturl.dev
        type: string
      scopes:
        example:
        - user:read
        items:
          type: string
        type: array
      state:
        example: iuywerghiuhg3487
        type: string
    required:
    - client_id
    - redirect_uri
    - scopes
    type: object
  validators.OauthExchangeToken:
    properties:
      client_id:
        example: 4722679b-5a48-4e85-9084-605e8df610f4
        type: string
      client_secret:
        example: 3i4u5h234ui5234bniuoo4i55543oi5jhio
        type: string
      code:
        example: iwuqebgrfweiur4
        type: string
      grant_type:
        example: authorization_code
        type: string
      redirect_uri:
        example: http://callback
        type: string
    required:
    - client_id
    - client_secret
    - code
    - grant_type
    - redirect_uri
    type: object
  validators.UserCreateData:
    properties:
      birthday:
        example: "1997-12-21"
        type: string
      email:
        example: johndoe@example.com
        type: string
      name:
        example: John
        type: string
      password:
        example: My@appPassw0rd
        type: string
      phone:
        example: "+34666123456"
        type: string
      surname:
        example: Doe
        type: string
    required:
    - birthday
    - email
    - name
    - password
    - surname
    type: object
  validators.UserResendEmail:
    properties:
      email:
        example: johndoe@example.com
        type: string
    required:
    - email
    type: object
  validators.UserUpdateData:
    properties:
      password:
        example: My@appPassw0rd
        type: string
      phone:
        example: "+34666123456"
        type: string
    type: object
host: localhost:9100
info:
  contact: {}
  description: Oauth2 server.
  title: Gandalf API
  version: "1.0"
paths:
  /apps:
    post:
      consumes:
      - application/json
      description: creates an app
      operationId: app-create
      parameters:
      - description: Creates an app
        in: body
        name: app
        required: true
        schema:
          $ref: '#/definitions/validators.AppCreateData'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/serializers.AppSerializer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/helpers.HTTPError'
      summary: Creates a new app
      tags:
      - Apps
  /auth/login:
    post:
      consumes:
      - application/json
      description: Logs an user into the system
      operationId: auth-login
      parameters:
      - description: Logs into the system with the given credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/validators.Credentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/serializers.TokensSerializer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/helpers.HTTPError'
      summary: Login admin
      tags:
      - Auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh the given access token
      operationId: auth-refresh
      parameters:
      - description: Refresh the given access token with the refresh one
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/validators.AuthTokens'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/serializers.TokensSerializer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.HTTPError'
      summary: Refresh
      tags:
      - Auth
  /me:
    delete:
      consumes:
      - application/json
      description: deletes the user who perform the request
      operationId: user-delete-me
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/helpers.HTTPError'
      summary: Delete me
      tags:
      - Me
    get:
      consumes:
      - application/json
      description: get the user who performs the request
      operationId: user-read-me
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/serializers.UserSerializer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/helpers.HTTPError'
      summary: Get me
      tags:
      - Me
    patch:
      consumes:
      - application/json
      description: updates an user
      operationId: user-update
      parameters:
      - description: Updates the user with the given data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/validators.UserUpdateData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/serializers.UserSerializer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/helpers.HTTPError'
      summary: Update user
      tags:
      - Me
  /me/reset-password:
    post:
      consumes:
      - application/json
      description: Reset user password
      operationId: user-reset-password
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/helpers.HTTPError'
      summary: Reset user password
      tags:
      - Me
  /me/verify:
    post:
      consumes:
      - application/json
      description: Verify an user
      operationId: user-verify
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/helpers.HTTPError'
      summary: Verify user
      tags:
      - Me
  /notifications/emails/reset-password:
    post:
      consumes:
      - application/json
      description: Sends reset password email
      operationId: notifications-emails-reset-password
      parameters:
      - description: resend the reset password email
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/validators.UserResendEmail'
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/helpers.HTTPError'
      summary: Sends reset password email
      tags:
      - Notification
  /notifications/emails/verify:
    post:
      consumes:
      - application/json
      description: Sends verification email
      operationId: notifications-emails-verification
      parameters:
      - description: sends the verification email
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/validators.UserResendEmail'
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/helpers.HTTPError'
      summary: Sends verification email
      tags:
      - Notification
  /oauth/authorize:
    post:
      consumes:
      - application/json
      description: authorize app
      operationId: oauth-authorize
      parameters:
      - description: Authorize app to get user's data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/validators.OauthAuthorizeData'
      produces:
      - application/json
      responses:
        "302":
          description: ""
      summary: Authorize an app to get the user data
      tags:
      - Oauth
  /oauth/login:
    post:
      consumes:
      - application/json
      description: logs an user
      operationId: oauth-login
      parameters:
      - description: Logs an user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/validators.Credentials'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/serializers.TokensSerializer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/helpers.HTTPError'
      summary: Login an user and retrieve auth token
      tags:
      - Oauth
  /oauth/token:
    post:
      consumes:
      - application/x-www-form-urlencoded
      - application/json
      description: Retrieves access token form the authorization one
      operationId: oauth-token
      parameters:
      - description: Token exchange data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/validators.OauthExchangeToken'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/serializers.TokensSerializer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/helpers.HTTPError'
      summary: Retrieves access token form the authorization one
      tags:
      - Oauth
  /ping:
    get:
      consumes:
      - application/json
      description: ping the system to healthcare purposes
      operationId: ping
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.pong'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helpers.HTTPError'
      summary: Ping
      tags:
      - Health
  /users:
    post:
      consumes:
      - application/json
      description: Creates a new user
      operationId: user-create
      parameters:
      - description: Creates a new user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/validators.UserCreateData'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/serializers.UserSerializer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.HTTPError'
      summary: Create User
      tags:
      - User
  /users/{uuid}:
    get:
      consumes:
      - application/json
      description: get an user by his uuid
      operationId: user-read-uuid
      parameters:
      - description: User uuid
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/serializers.UserSerializer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/helpers.HTTPError'
      summary: Get user
      tags:
      - User
securityDefinitions:
  OAuth2AccessCode:
    authorizationUrl: https://localhost:9100/oauth/login
    flow: accessCode
    scopes:
      app:read: ' Grants access to read apps'
      user:me:delete: ' Grants access to delete self user'
      user:me:read: ' Grants access to read self user'
      user:me:write: ' Grants access to write self user'
    tokenUrl: https://localhost:9100/oauth/token
    type: oauth2
swagger: "2.0"
x-extension-openapi:
  example: value on a json format
